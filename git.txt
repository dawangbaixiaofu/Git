在本地创建文件夹后，进行初始化，让其变成git本地仓库
git init 
在git本地库建立好仓库以及在github上建立远程仓库后，
需要把本地仓库与远程仓库进行关联，然后把本地仓库文件
上传到github远程库中。
git remote add origin https://github.com/username/test.git
关联之后把本地库中所有的内容推送到远程仓库
git push -u origin master




git diff 显示两个不同分支的差异。
有几种不同的格式
	正常格式
	上下文格式
	合并格式
比较常用的是合并格式。这种格式的详细见（自己搜索）

git fetch origin master:temp
把远程库中master分支内容拉倒本地库中的temp新建分支。
git merge temp
在本地库的master分支下合并temp分支到master分支。
在合并之前需要查看两个分支的差异。使用命令是：
	git diff master temp
合并的时候，需要解决冲突的问题。

最后在合并好的master分支上，进行编辑，最后再
git push origin
提交到远程库，默认的是master分支

git中的工作目录，索引，提交之间的区别
git diff 在三者中进行对比的作用体现

--------------
git log 
--------------

git log 命令：
	可以查看提交commit history
git log 默认会输出commit hash , author ,date, commit message
	--oneline
	简化命令，仅仅输出commit hash 前7个字符串和commit message
	--stat
	在git log 输出内容的基础上添加文件增删的统计数据
	--p
	控制输出每个commit具体修改的内容，输出的形式以diff的形式给出。
	--author='username'
	用来过滤commit,限定输出给定的用户
	-n
	n是数字，表示要输出的数量
	--after 'date'
	--before 'date'
	限定指定日期范围的log
	--pretty=format:"%h-%an,%ar:%s"
	使用指定的格式来显示提交历史
	详细占位符的意义，可以去查看。
	--graph 
	 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况。

如何看git log --graph 的点线图？

	
--------------
git branch
--------------
git branch 
	列出本地已经存在的分支，并且在当前分支的前面用"*"标记
git branch -r 
	查看远程版本库分支列表
git branch -a
	查看所有分支，包括本地和远程的
git branch -d branchname
	删除branchname分支
git branch -vv
	查看本地分支对应的远程分支
git branch -m oldname newname
	给分支重命名

---------------------
git checkout
---------------------
两个作用：
	1.操作文件
	2.操作分支
-------------------
版本的前进后退
-------------------
2019-10-04

git log
git reflog
head@{移动到当前版本需要多少步}

【推荐】基于索引值操作
	索引值就是提交的时候哈希值
	命令：
	git reset --hard 索引值
使用^符号
	只能往后，不能向前
	git reset --hard HEAD^后退一步
	git reset --hard HEASD^^后退两步

使用~符号
	git reset --hard HEAD~3 后退三步
	只能后退

git reset 命令三个参数对比：
--soft
	在本地库移动HEAD指针
--hard
	在本地库移动HEAD指针，重置暂存区，重置工作区
--mixed
	在本地库移动HEAD指针，重置暂存区

使用git status查看残存区 index storage


删除文件找回
rm filename
git add filename
git commit filename -m 'commit message'

回到未删除的版本
git reset --hard index_code


添加到暂存区的删除文件找回
	已经执行的操作
	rm filename
	git add filename
	希望能够在工作区找回已经删除的文件
	git reset --hard HEAD
	--hard能够恢复暂存区和工作区

删除的文件能够找回的前提是：删除前，文件存在时候的状态
提交到了本地库。

git reset --hard 【指针位置】

	删除操作已经提交到本地库，指针位置指向历史记录
	删除操作尚未提交到本地库，指针位置使用HEAD

比较文件的差异：
git diff filename
	将工作区文件和暂存区的文件进行比较
git diff 本地库中历史版本 filename
	将工作区文件和本地库历史版本文件比较
	git diff HEAD filename
	
git diff 不带文件名称
	比较多个文件

----------
git 分支
----------
新建的分支是从主分支中复制过来的
创建分支
	git branch branch_name
切换分支
	git checkout branch_name
查看分支
	git branch -v
合并分支：
	第一：切换到接受修改的分支【主分支】
	第二：执行merge命令
		git merge 分支名称
解决冲突：
	在主分支和bug分支上同时进行了修改。
	git对文件的操作单位是行，进行行修改的时候，显示
	修改的结果是1 insertion ， 1 deletion

	合并冲突后，文件内容加上了新的标记
	
	<<<<<<<<<<<< HEAD
	内容
	==========
	内容
	>>>>>>>>>>> branch_name

	<<<<<<<<< HEAD 和 =====之间的内容是当前分支内容
	=======和 >>>>>>>branch_name是另外一个分支的内容

	怎么解决？
	删除符号标记，修改到自己想要的内容
	使用git add 文件名 提交已经解决的冲突到暂存区
	git commit -m 'Message ‘不能带文件名，提交合并到本地库
	PS：git commit的时候不能带文件名

------------
GIT基本原理
------------
Hash
特点：
1. 不管输入数据的数据量有多大，输入一个哈希算法，得到的加密
结果长度固定。

2.Hash算法不可逆

3.文件内容改变，输出改变--可用来文件的校验

哈希算法种类：
	SHA-1算法--git采用


GIt保存版本的机制
	git把数据看做是小型文件系统的一组快照，每次提交更新时候
	GIt都会对当前全部文件制作一个快照并保存这个快照索引。如果文件
	没有修改，git不再重新存储改文件，而是保存一个连接指向之前存储
	的文件。所以Git的工作方式可以称之为快照流。

git的“提交对象”
	tree hash	--包含所有的文件（项目，文件夹）
	file hash
提交对象及其父对象形成的链条
提交对象内容：

	commit	size
	tree hash
	parent
	author
	committer

Snapshot 

Git 分支管理机制：
root commit

创建分支，git内部创建一个新的指针
切换分支，切换指针

-----------------
GIthub
-----------------
本地库和远程库交互
给远程地址起别名：
git remote add origin(别名) address
git remote -v 查看

git push address branch_name

git clone address

把新用户添加到团队
在github中的settings -- collaborators 

远程库修改拉取：
fetch + merge

git fetch [远程地址库名][远程分支名]
git fetch origin master
git checkout [远程库名/远程分支名]
去查看fetch的内容
git checkout origin/master
git merge origin/master

= git pull origin master

-------------------
协同开发冲突解决
-------------------
如果不是基于GitHub远程库的最新版所做的修改，不能推送，
必须先拉取。
拉取后如果进入冲突状态，按照“分支冲突解决”操作解决即可。


-------------------
跨团队协作
-------------------
首先fork到自己的远程库，再clone到自己的本地库
添加所要添加的内容，push到自己的远程库。

发送者
	发送pull request
	在GitHub中项目下Pull requests --new pull request
	(comparing changes)**号标记出来
	--create pull request
	--（open a pull request )需要发消息给原项目的创建人
接受者：
	收到pull requests
	--commits 查看所做的提交
	--files changed 查看所做的修改
	对代码进行审核，如果没有问题，回到
	conversation下
	--merge pull request
	在合并的时候，可以添加相关的信息。
	--confirm merge
	最后将合并后的远程库，内容拉取到自己的本地库

SSH免密登陆
ssh-keygen -t rsa -C 邮箱
git remote add origin_ssh（远程库地址别名）
添加ssh地址到本地库







何切换分支？
如何在remote创建分支？
	git push --set-upstream origin branch_name : local_branch_name
如何merge request？
	
如何合并远程库中的不同分支？

如何使用git中的release功能？release的功能是什么？



git fork是从别人的远程库项目拉取拷贝到自己的远程库中，并建立联系。
当被人的远程库中的项目内容改变的时候，可以提交pull request，进行更新。
随时和别人的项目保持最新的进度。

如何pull request？各种request功能如何实现？
pull request 是对远程库来说的，对fork别人库中的项目进行更新。



